import java.nio.file.Paths
import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat

buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}


plugins {
    id 'application'
    id 'jacoco'
    id 'pmd'

    alias(libs.plugins.moduleplugin)
    alias(libs.plugins.jlink)
    alias(libs.plugins.snyk)
}

group 'xyz.ronella.template'
version VERSION

repositories {
    mavenCentral()
}

dependencyLocking {
    lockAllConfigurations()
}

dependencies {

    implementation libs.jackson.bind
    implementation libs.guice
    implementation libs.guava
    implementation libs.trivial.chunk
    implementation libs.bundles.logger

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testImplementation testLibs.bundles.unit.test

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

}

ext {
    FILTER_TOKEN = [
            'project.name': project.name
            ,'app.version' : version
            ,'build.date' : new SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSS').format(new Date())
    ]
}

application {
    mainModule = moduleName
    mainClass = 'xyz.ronella.template.api.Application'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jlink {
    options = ['--strip-debug', '--compress', 'zip-9', '--no-header-files', '--no-man-pages']
    launcher{
        moduleName = application.mainModule
        mainClassName = application.mainClass
        jvmArgs = ['-Dlogback.configurationFile={{BIN_DIR}}\\conf\\logback.xml']
    }
    forceMerge('jackson-annotations')
    imageName = "${project.name}-${version}"
}

processResources {
    filter(ReplaceTokens, tokens : FILTER_TOKEN)
}

test {
    dependsOn(pmdMain)
    finalizedBy(jacocoTestReport)
    useJUnitPlatform()
}

task preparePackage(group: 'build') {
    doLast {
        def projectName = "${project.name}-${version}"

        def batchFile = "${project.name}.bat"
        def batchPath = Paths.get(buildDir.absolutePath, projectName, batchFile).toFile()

        def confDirectory = "conf"
        def confPath = Paths.get(rootDir.absolutePath, confDirectory)

        def jlinkTargetDir = Paths.get(buildDir.absolutePath, projectName)
        def jlinkBinDir = Paths.get(jlinkTargetDir.toFile().absolutePath, "bin")
        def jlinkConfDir = Paths.get(jlinkBinDir.toFile().absolutePath, "..", confDirectory)

        def logbackFile = "logback.xml"
        def logbackPath = Paths.get(jlinkConfDir.toFile().absolutePath, logbackFile).toFile()

        def mainResources = sourceSets.main.resources.sourceDirectories.asPath

        copy {
            from(Paths.get(buildDir.absolutePath, projectName, "bin"))
            into(Paths.get(buildDir.absolutePath, projectName))
            include batchFile
        }

        copy {
            from(confPath)
            into(jlinkConfDir)
        }

        copy {
            from(mainResources)
            into(jlinkConfDir)
        }

        if (batchPath.exists()) {
            def pattern = "set DIR=\"%~dp0\""
            def replaceWith = "set DIR=\"%~dp0\\bin\""
            def content = batchPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (content != updatedContent) {
                batchPath.write(updatedContent)
            }
        }

        if (logbackPath.exists()) {
            def pattern = "logs/"
            def replaceWith = "../${pattern}"
            def content = logbackPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (content != updatedContent) {
                logbackPath.write(updatedContent)
            }
        }
    }
}

tasks.findByPath('jlink').finalizedBy(preparePackage)

task packWin(group: 'distribution', dependsOn: ['jlink']) {
    doLast{
        def projectName = "${project.name}-${version}"
        def jlinkOutputDir = Paths.get(buildDir.absolutePath, projectName)
        def outputFile =  Paths.get(buildDir.absolutePath, "pack", "${projectName}-win64.zip")

        ant.zip(destfile: outputFile) {
            fileset(dir: jlinkOutputDir)
        }
    }
}

run {
    standardInput = System.in
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

pmd {
    consoleOutput = true
    toolVersion = "7.7.0"
    rulesMinimumPriority = 5
    ruleSetFiles = files('quality/pmd/java/custom.xml')
    ruleSets = []
}

pmdTest.enabled = false