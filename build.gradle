import java.nio.file.Paths

plugins {
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'xyz.ronella.template'
version '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
    implementation 'com.google.inject:guice:5.1.0'
    implementation 'xyz.ronella.casual:trivial-chunk:2.14.0'

    compileOnly 'org.projectlombok:lombok:1.18.24'

    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

application {
    mainModule = moduleName
    mainClass = 'xyz.ronella.template.http.Application'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        moduleName = application.mainModule
        mainClassName = application.mainClass
    }
    imageName = "${project.name}-${version}"
}

test {
    useJUnitPlatform()
}

task preparePackage(dependsOn: ['jlink']) {
    doLast {
        def projectName = "${project.name}-${version}"
        def batchFile = "${project.name}.bat"
        def batchPath = Paths.get(buildDir.absolutePath, projectName, batchFile).toFile()

        copy {
            from(Paths.get(buildDir.absolutePath, projectName, "bin"))
            into(Paths.get(buildDir.absolutePath, projectName))
            include batchFile
        }

        if (batchPath.exists()) {
            def pattern = "set DIR=\"%~dp0\""
            def replaceWith = "set DIR=\"%~dp0\\bin\""
            def content = batchPath.text
            def updatedContent = content.replace(pattern, replaceWith)
            if (!content.equals(updatedContent)) {
                batchPath.write(updatedContent)
            }
        }
    }
}

task packWin(dependsOn: ['preparePackage']) {
    doLast{
        def projectName = "${project.name}-${version}"
        def jlinkOutputDir = Paths.get(buildDir.absolutePath, projectName)
        def outputFile =  Paths.get(buildDir.absolutePath, "pack", "${projectName}-win64.zip")

        ant.zip(destfile: outputFile) {
            fileset(dir: jlinkOutputDir)
        }
    }
}

run {
    standardInput = System.in
}